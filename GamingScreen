/**
 * GamingScreen
 * 
 * @author Owen Cruise
 * @author Hayes Ensign
 * @version 5/11/2017
 */
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.TimeUtils;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.math.*;
import com.badlogic.gdx.Gdx;
import java.util.logging.FileHandler;
import java.io.File;
import com.badlogic.gdx.graphics.g2d.Sprite;
public class GamingScreen extends Hoopmania implements Screen
{
    private final Hoopmania game;
    public  Texture gymBackground;
    public  Texture hoop;
    public  Texture playerImg;
    public  Texture ballImg;
    public  Sprite arrow;
    private Circle ball;
    private Music mus;
    private Sound netSwish;
    private Sound crowdRoar;
    private Array<String> shotMessages;
    private BitmapFont counterFont;
    public  boolean shotMade;
    public  final long LEFT_HOOP_EDGE = 774;
    public  final long RIGHT_HOOP_EDGE = 837;
    public  long hoopHeight;
    public  OrthographicCamera cam;
    public  long shotCtr;
    public  long playerPosition;
    public  final int VECTOR_MAX_LENGTH = 20;
    public  final int VECTOR_MIN_LENGTH = 3;
    private boolean isReleased;
    public  float vectorDirection;
    public  float vectorMagnitude;
    private final double G = -20;//acceleration due to gravity
    public  final double BALL_MASS = 0.5;//kilograms
    public  double v0x;
    public  double vy;
    public  boolean inMotion;
    public  GridPoint2 tip;
    public  GridPoint2 tail;
    public  Rectangle player;

    /**
     * Constructor
     *
     */
    public GamingScreen (final Hoopmania game)
    {
        this.game     = game;
        cam           = new OrthographicCamera();
        cam.setToOrtho(false, 1000, 1000);
        gymBackground = new Texture(Gdx.files.internal("Background.png"));
        playerImg     = new Texture(Gdx.files.internal("Player Cropped No Ball.png"));
        ballImg       = new Texture(Gdx.files.internal("Basketball.png"));
        arrow         = new Sprite(new Texture(Gdx.files.internal("Arrow.png")));
        mus           = Gdx.audio.newMusic(Gdx.files.internal("BBall Music.mp3"));
        mus.setLooping(true);
        crowdRoar = Gdx.audio.newSound(Gdx.files.internal("Roaring Crowd.wav"));
        netSwish  = Gdx.audio.newSound(Gdx.files.internal("Swish.wav"));
        String[] messages = {"Nothing but net!", "Nice shot!", "Swish!",
                "Buzzer Beater!", "Baller!", "Buckets!", "Awesome!",
                "Sweet!", "Great!", "Keep it up!"};
        shotMessages = new Array(messages);
        counterFont = new BitmapFont(Gdx.files.internal("Creampuf.fnt"));
        playerPosition = MathUtils.random(10, 480);
        ball = new Circle(playerPosition + 30, 360, 15);
    }

    /**
     * Utilizes the vector's direction and magnitude and
     * translates them into a force, then the resulting
     * acceleration, and finally the 'x' and 'y' components
     * of the ball's initial speed
     * 
     * Postcondition: fields v0x and vy have been updated to
     * correspond with the initial velocity with which it leaves
     * the player's hands
     */
    private void translateArrow ()
    {
        double netForce = vectorMagnitude;
        double acceleration = netForce / BALL_MASS;
        double v0 = Math.sqrt(2 * acceleration * /* delta-x */15);//change the delta-x if necessary
        v0x = v0 * MathUtils.cosDeg(vectorDirection);
        vy = v0 * MathUtils.sinDeg(vectorDirection);
    }

    /**
     * Unprojects arrow vector and converts it into a magnitude
     * and direction
     * 
     * Postcondition: fields vectorMagnitude and vectorDirection
     * have been updated to correspond with the state of the arrow
     */
    private void unprojectArrow(Vector3 force)
    {
        vectorMagnitude = force.len();
        vectorDirection = MathUtils.atan2(force.y, force.x) * MathUtils.radiansToDegrees;
    }

    /**
     * @return true if, and only if, the ball's position lies
     * within the boundaries of the hoop
     */
    private boolean insideHoop()
    {
        if (ball.y == hoopHeight && ball.x >= LEFT_HOOP_EDGE
        && ball.x <= RIGHT_HOOP_EDGE)
            return true;

        return false;
    }

    /**
     * @param delta amount of time between successive
     *        calls of render
     * Implements render (float) in Screen
     */
    @Override
    public void render (float delta)
    {
        Gdx.gl.glClearColor(0, 0, 0, 0);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
        cam.update();
        game.sprites.setProjectionMatrix(cam.combined);

        mus.play();
        game.sprites.begin();
        game.font.draw(game.sprites, "Shots Made: " + shotCtr, 400, 920);
        game.sprites.draw(gymBackground, 0, 0, 1000, 1000);
        game.sprites.draw(playerImg, playerPosition, 10, 40, 400);
        game.sprites.draw(ballImg, ball.x, ball.y, 30, 30);

        if (Gdx.input.justTouched())
            inMotion = true;

        if (!inMotion)
        {
            // process user input
            Vector3 pos = cam.unproject(new Vector3(Gdx.input.getX(), Gdx.input.getY(), 0)); 
            //             System.out.println(pos);
            Vector3 ballVector = new Vector3(ball.x, ball.y, 0);
            Vector3 force = new Vector3(pos.x - ballVector.x, pos.y - ballVector.y, 0);
            unprojectArrow(force);
            vectorMagnitude = pos.dst(ballVector); 

            //         mouseX = MathUtils.clamp(mouseX, (int)(ball.x) + 10, (int)(ball.x) + 60);
            //         mouseY = MathUtils.clamp(mouseY, (int)(ball.y) + 10, (int)(ball.y) + 60);
            // 
            //             tail = new GridPoint2((int)ball.x, (int)ball.y);
            //             tip = new GridPoint2(mouseX, mouseY);

            translateArrow();
            //             System.out.println(vectorDirection); 
            arrow.setSize(vectorMagnitude, 15f);
            arrow.setRotation(vectorDirection);
            arrow.setX(ball.x + 5);
            arrow.setY(ball.y - 13);
            game.sprites.draw(arrow, ball.x, ball.y);
            //             System.out.println("vectorMagnitude = " + vectorMagnitude);
        }
        game.sprites.end();

        if (inMotion)
        {
            ball.x += v0x * 2 * delta;
            ball.y += vy * delta + 0.5 * G * delta * delta;

            vy = vy + G * delta;
            System.out.println("vx =\t" + v0x);
            System.out.println("vy =\t" + vy);
            if (insideHoop())
            {
                int rand = MathUtils.random(shotMessages.size);
                String message = shotMessages.get(rand);
                game.font.draw(game.sprites, message, 475, 960);
                shotCtr++;
                inMotion = false;
            }
        }

        if (ball.x > 1000 || ball.y < 0)
        {
            inMotion = false;
            playerPosition = MathUtils.random(10, 480);
            ball.x = playerPosition + 30;
            ball.y = 360;
        }
        
        if (shotCtr > 10)
        dispose();
    }

    /**
     * @param width the width of the new screen size
     * @param height the height of the new screen size
     * Implements resize (int, int) in Screen
     */
    @Override
    public void resize (int width, int height)
    {
    }

    /**
     * Implements show () in Screen
     */
    @Override
    public void show ()
    {
    }

    /**
     * Implements hide () in Screen
     */
    @Override
    public void hide ()
    {
    }

    /**
     * Implements pause () in Screen
     */
    @Override
    public void pause ()
    {
    }

    /**
     * Implements resume () in Screen
     */
    @Override
    public void resume ()
    {
    }

    /**
     * Implements dispose () in Screen
     */
    @Override
    public void dispose ()
    {
        playerImg.dispose();
        ballImg.dispose();
        gymBackground.dispose();
        render();
    }
}
